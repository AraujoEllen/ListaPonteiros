#include <stdio.h>
#include <stdlib.h>

// Função que ordena os elementos da lista
int comparaCrescente(const void *x,const void *y){
  if(*(int*)x == *(int*)y){
    return 0; //iguais
  }  
  else if(*(float*)x < *(float*)y){
    return -1; //X vem antes de Y
  }
  else
    return 1; //X vem depois de Y
}

//Criando minha própria função de ordenação com base no 'qsort()'
void myFunction(float *lista, int quant, int (*comparaCrescente)(const void *, const void*)){
  
  float aux;
  
  for(int i = 0; i < quant; i++ ){
    for(int j = i; j < quant; j++){
      if(comparaCrescente(lista+i,lista+j)>0){
        aux = lista[i];
        lista[i] = lista[j];
        lista[j] = aux;
      }        
    }
  }
}

// Função que mostra os elementos da lista
void mostrar(float *lista, int quant){
  for(int i = 0; i < quant; i++){
    printf("%.2f \n",lista[i]);
  }
}

int main(void) {
  
  int i, n;
  float *lista;
  float aux;
  
  printf("Informe a quantidade de numeros que deseja ordenar:\n");
  scanf("%d", &n);
  printf("\n");

  // Alocando um bloco de memoria 
  lista = (float *)malloc(n * sizeof(float));
  if (lista == NULL) {
    printf("Erro: memoria insuficiente\n");
    exit(1);
  }

  // Solicitando ao usuário a quantidade de elementos da lista 
  for (i = 0; i < n; i++){
      printf("Digite o valor da posicao %d: \n", i+1);
      scanf("%f", &lista[i]);
  }
  
  // Mostrando os elementos obtidos anteriormente  
  printf("\nNumeros informados:\n");
  mostrar(lista,n);

  // Chamada da função 'myFunction()' para ordenar a lista
  myFunction(lista, n, comparaCrescente);

  // Mostrando os elementos da lista em ordem crescente 
  printf("\nNumeros informados em ordem crescente:\n");
  mostrar(lista,n);
  
  // Liberando a memória alocada 
  free(lista);
  lista = NULL;
  free(lista);

  return 0;
}